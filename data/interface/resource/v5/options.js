config.options.v5 = {
  "keyMap": [
    "vim", 
    "emacs", 
    "sublime"
  ],
  "scrollbarStyle": [
    "null", 
    "simple", 
    "native", 
    "overlay"
  ],
  "editor": {
    "new": undefined,
    "open": undefined,
    "save": undefined,
    "saveAs": undefined,
    "saveAll": undefined,
    "openFolder": undefined,
    "openSettings": undefined
  },
  "theme": [
    "3024-day", "3024-night", "abbott", "abcdef", "ambiance-mobile", "ambiance", "ayu-dark", "ayu-mirage", "base16-dark", "base16-light", "bespin", "blackboard", "cobalt", "colorforth", "darcula", "default", "dracula", "duotone-dark", "duotone-light", "eclipse", "elegant", "erlang-dark", "gruvbox-dark", "hopscotch", "icecoder", "idea", "isotope", "juejin", "lesser-dark", "liquibyte", "lucario", "material-darker", "material-ocean", "material-palenight", "material", "mbo", "mdn-like", "midnight", "monokai", "moxer", "neat", "neo", "night", "nord", "oceanic-next", "one-dark", "panda-syntax", "paraiso-dark", "paraiso-light", "pastel-on-dark", "railscasts", "rubyblue", "seti", "shadowfox", "solarized", "ssms", "the-matrix", "tomorrow-night-bright", "tomorrow-night-eighties", "ttcn", "twilight", "vibrant-ink", "xq-dark", "xq-light", "yeti", "yonce", "zenburn"
  ],
  "mode": [
    "application/n-triples", "application/n-quads", "text/n-triples", "text/x-c++src", "text/x-systemverilog",
    "script/x-vue", "text/x-vue", "application/xml", "text/xml", "text/x-yaml", "text/yaml", "application/x-json",
    "text/x-oz", "text/troff", "text/x-tcl", "text/plain", "text/x-pig", "text/x-idl", "text/x-pug", "text/x-sml",
    "text/x-lua", "text/x-sas", "text/x-rst", "text/x-scss", "text/x-ttcn", "text/x-toml", "text/x-styl", "text/turtle",
    "text/javascript", "text/ecmascript", "application/javascript", "application/x-javascript", "application/ecmascript",
    "text/x-octave", "text/x-pascal", "text/x-kotlin", "text/x-groovy", "text/vbscript", "text/x-mscgen", "text/velocity",
    "text/x-cython", "text/x-csharp", "text/x-django", "text/x-eiffel", "text/x-erlang", "text/x-factor", "text/x-fsharp",
    "text/x-twig", "text/x-stex", "text/x-solr", "text/x-ruby", "text/x-sass", "text/x-rsrc", "text/x-java", "text/x-nsis",
    "text/x-ebnf", "text/x-diff", "text/x-csrc", "text/x-vhdl", "text/x-haml", "text/x-haxe", "text/x-hxml", "text/jinja2",
    "text/x-php", "application/x-httpd-php", "application/x-httpd-php-open", "text/x-sh", "application/x-sh", "text/x-slim",
    "text/x-cassandra", "text/x-brainfuck", "application/mbox", "text/x-nginx-conf", "text/x-objectivec", "text/x-dockerfile",
    "text/x-puppet", "text/x-tornado", "text/x-textile", "text/x-rustsrc", "text/x-haskell", "text/x-feature", "text/x-verilog",
    "text/apl", "text/x-q", "text/jsx", "text/x-d", "text/css", "text/x-vb", "text/x-go", "text/html", "text/mirc", "text/x-xu",
    "text/x-soy", "text/x-gas", "text/x-gfm", "text/x-sql", "text/x-z80", "text/x-gss", "text/x-elm", "text/x-fcl", "text/x-ecl",
    "text/x-less", "text/x-perl", "text/x-ocaml", "text/x-plsql", "text/x-pgsql", "text/x-mumps", "text/x-swift", "text/x-latex",
    "application/x-ejs", "application/x-erb", "application/x-jsp", "text/x-livescript", "text/x-properties", "application/x-slim",
    "text/x-msgenny", "text/x-fortran", "text/x-clojure", "text/x-crystal", "text/x-mariadb", "text/x-modelica", "text/x-asterisk",
    "text/x-mssql", "text/x-mysql", "text/x-julia", "message/http", "text/x-yacas", "text/x-dylan", "text/x-cmake", "text/x-esper",
    "application/vnd.coffeescript", "text/coffeescript", "text/x-coffeescript", "application/dart", "text/x-dart", "application/json",
    "application/sieve", "application/xquery", "text/x-common-lisp", "application/x-aspx", "text/x-mathematica", "text/x-spreadsheet",
    "text/x-rpm-changes", "text/x-objectivec++", "application/ld+json", "application/xml-dtd", "text/typescript-jsx", "text/x-python",
    "application/pgp", "application/pgp-encrypted", "application/pgp-keys", "application/pgp-signature", "application/x-cypher-query",
    "text/x-cobol", "text/x-forth", "text/x-scala", "text/x-stsrc", "text/x-webidl", "text/x-sqlite", "text/x-smarty", "text/x-scheme",
    "text/x-ttcn-asn", "application/edn", "text/x-ttcn-cfg", "text/x-squirrel", "text/x-markdown", "text/x-protobuf", "text/x-rpm-spec",
    "text/x-clojurescript", "application/typescript", "text/x-literate-haskell", "application/x-powershell", "application/sparql-query"
  ],
  "excluded": {
    "intelliSense": {
      "trigger": {
        "keys": {
          "8": "backspace",
          "9": "tab",
          "13": "enter",
          "16": "shift",
          "17": "ctrl",
          "18": "alt",
          "19": "pause",
          "20": "capslock",
          "27": "escape",
          "33": "pageup",
          "34": "pagedown",
          "35": "end",
          "36": "home",
          "37": "left",
          "38": "up",
          "39": "right",
          "40": "down",
          "45": "insert",
          "46": "delete",
          "67": "c",
          "83": "s",
          "86": "v",
          "90": "z",
          "91": "left window key",
          "92": "right window key",
          "93": "select",
          "107": "add",
          "109": "subtract",
          "110": "decimal point",
          "111": "divide",
          "112": "f1",
          "113": "f2",
          "114": "f3",
          "115": "f4",
          "116": "f5",
          "117": "f6",
          "118": "f7",
          "119": "f8",
          "120": "f9",
          "121": "f10",
          "122": "f11",
          "123": "f12",
          "144": "numlock",
          "145": "scrolllock",
          "186": "semicolon",
          "187": "equalsign",
          "188": "comma",
          "189": "dash",
          "191": "slash",
          "192": "graveaccent",
          "220": "backslash",
          "222": "quote"
        }
      }
    }
  },
  "codemirror": {
    set lint (val) {config.storage.write("lint", val)},
    get lint () {return config.storage.read("lint") !== undefined ? config.storage.read("lint") : false},
    set tabSize (val) {config.storage.write("tabSize", val)},
    get tabSize () {return config.storage.read("tabSize") !== undefined ? config.storage.read("tabSize") : 2},
    set theme (val) {config.storage.write("theme", val)},
    get theme () {return config.storage.read("theme") !== undefined ? config.storage.read("theme") : "default"},
    set keyMap (val) {config.storage.write("keyMap", val)},
    get keyMap () {return config.storage.read("keyMap") !== undefined ? config.storage.read("keyMap") : "sublime"},
    set dragDrop (val) {config.storage.write("dragDrop", val)},
    get dragDrop () {return config.storage.read("dragDrop") !== undefined ? config.storage.read("dragDrop") : true},
    set autohint (val) {config.storage.write("autohint", val)},
    get autohint () {return config.storage.read("autohint") !== undefined ? config.storage.read("autohint") : true},
    set matchTag (val) {config.storage.write("matchTag", val)},   
    get matchTag () {return config.storage.read("matchTag") !== undefined ? config.storage.read("matchTag") : false},
    set mode (val) {config.storage.write("mode", val)},
    get mode () {return config.storage.read("mode") !== undefined ? config.storage.read("mode") : "text/javascript"},
    set readOnly (val) {config.storage.write("readOnly", val)},
    get readOnly () {return config.storage.read("readOnly") !== undefined ? config.storage.read("readOnly") : false},
    set fontSize (val) {config.storage.write("fontSize", val)},
    get fontSize () {return config.storage.read("fontSize") !== undefined ? config.storage.read("fontSize") : "12px"},
    set undoDepth (val) {config.storage.write("undoDepth", val)},
    get undoDepth () {return config.storage.read("undoDepth") !== undefined ? config.storage.read("undoDepth") : 200},
    set autofocus (val) {config.storage.write("autofocus", val)},
    get autofocus () {return config.storage.read("autofocus") !== undefined ? config.storage.read("autofocus") : true},
    set indentUnit (val) {config.storage.write("indentUnit", val)},
    get indentUnit () {return config.storage.read("indentUnit") !== undefined ? config.storage.read("indentUnit") : 2},
    set direction (val) {config.storage.write("direction", val)},
    get direction () {return config.storage.read("direction") !== undefined ? config.storage.read("direction") : "ltr"},
    set spellcheck (val) {config.storage.write("spellcheck", val)},
    get spellcheck () {return config.storage.read("spellcheck") !== undefined ? config.storage.read("spellcheck") : true},
    set foldGutter (val) {config.storage.write("foldGutter", val)},
    get foldGutter () {return config.storage.read("foldGutter") !== undefined ? config.storage.read("foldGutter") : false},
    set autocorrect (val) {config.storage.write("autocorrect", val)},
    get autocorrect () {return config.storage.read("autocorrect") !== undefined ? config.storage.read("autocorrect") : true},
    set fixedGutter (val) {config.storage.write("fixedGutter", val)},
    get fixedGutter () {return config.storage.read("fixedGutter") !== undefined ? config.storage.read("fixedGutter") : true},
    set smartIndent (val) {config.storage.write("smartIndent", val)},
    get smartIndent () {return config.storage.read("smartIndent") !== undefined ? config.storage.read("smartIndent") : true},
    set lineNumbers (val) {config.storage.write("lineNumbers", val)},
    get lineNumbers () {return config.storage.read("lineNumbers") !== undefined ? config.storage.read("lineNumbers") : true},
    set cursorHeight (val) {config.storage.write("cursorHeight", val)},
    get largeTabBar () {return config.storage.read("largeTabBar") !== undefined ? config.storage.read("largeTabBar") : false},
    set largeTabBar (val) {config.storage.write("largeTabBar", val)},
    get cursorHeight () {return config.storage.read("cursorHeight") !== undefined ? config.storage.read("cursorHeight") : 1},
    set lineHeight (val) {config.storage.write("lineHeight", val)},
    get lineHeight () {return config.storage.read("lineHeight") !== undefined ? config.storage.read("lineHeight") : "normal"},
    set pollInterval (val) {config.storage.write("pollInterval", val)},
    get pollInterval () {return config.storage.read("pollInterval") !== undefined ? config.storage.read("pollInterval") : 100},
    set autoComplete (val) {config.storage.write("autoComplete", val)},
    get autoComplete () {return config.storage.read("autoComplete") !== undefined ? config.storage.read("autoComplete") : true},
    set flattenSpans (val) {config.storage.write("flattenSpans", val)},
    get flattenSpans () {return config.storage.read("flattenSpans") !== undefined ? config.storage.read("flattenSpans") : true},
    set lineWrapping (val) {config.storage.write("lineWrapping", val)},
    get lineWrapping () {return config.storage.read("lineWrapping") !== undefined ? config.storage.read("lineWrapping") : true},
    set matchBrackets (val) {config.storage.write("matchBrackets", val)},
    get matchBrackets () {return config.storage.read("matchBrackets") !== undefined ? config.storage.read("matchBrackets") : true},
    set electricChars (val) {config.storage.write("electricChars", val)},
    get electricChars () {return config.storage.read("electricChars") !== undefined ? config.storage.read("electricChars") : true},
    set autoCloseTags (val) {config.storage.write("autoCloseTags", val)},
    get autoCloseTags () {return config.storage.read("autoCloseTags") !== undefined ? config.storage.read("autoCloseTags") : false},
    set viewportMargin (val) {config.storage.write("viewportMargin", val)},
    get viewportMargin () {return config.storage.read("viewportMargin") !== undefined ? config.storage.read("viewportMargin") : 10},
    set autocapitalize (val) {config.storage.write("autocapitalize", val)},
    get autocapitalize () {return config.storage.read("autocapitalize") !== undefined ? config.storage.read("autocapitalize") : true},
    set indentWithTabs (val) {config.storage.write("indentWithTabs", val)},
    get indentWithTabs () {return config.storage.read("indentWithTabs") !== undefined ? config.storage.read("indentWithTabs") : true},
		set showInvisibles (val) {config.storage.write("showInvisibles", val)},
    get showInvisibles () {return config.storage.read("showInvisibles") !== undefined ? config.storage.read("showInvisibles") : false},
    set cursorBlinkRate (val) {config.storage.write("cursorBlinkRate", val)},
    get cursorBlinkRate () {return config.storage.read("cursorBlinkRate") !== undefined ? config.storage.read("cursorBlinkRate") : 530},
    set styleActiveLine (val) {config.storage.write("styleActiveLine", val)},
    get styleActiveLine () {return config.storage.read("styleActiveLine") !== undefined ? config.storage.read("styleActiveLine") : true},
    set rtlMoveVisually (val) {config.storage.write("rtlMoveVisually", val)},
    get rtlMoveVisually () {return config.storage.read("rtlMoveVisually") !== undefined ? config.storage.read("rtlMoveVisually") : false},
    set firstLineNumber (val) {config.storage.write("firstLineNumber", val)},
    get firstLineNumber () {return config.storage.read("firstLineNumber") !== undefined ? config.storage.read("firstLineNumber") : true},
    set lineWiseCopyCut (val) {config.storage.write("lineWiseCopyCut", val)},
    get lineWiseCopyCut () {return config.storage.read("lineWiseCopyCut") !== undefined ? config.storage.read("lineWiseCopyCut") : false},
    set scrollbarStyle (val) {config.storage.write("scrollbarStyle", val)},
    get scrollbarStyle () {return config.storage.read("scrollbarStyle") !== undefined ? config.storage.read("scrollbarStyle") : "overlay"},
    set matchHighlighter (val) {config.storage.write("matchHighlighter", val)},
    get matchHighlighter () {return config.storage.read("matchHighlighter") !== undefined ? config.storage.read("matchHighlighter") : true},
		set showTrailingSpace (val) {config.storage.write("showTrailingSpace", val)},
    get showTrailingSpace () {return config.storage.read("showTrailingSpace") !== undefined ? config.storage.read("showTrailingSpace") : true},
    set historyEventDelay (val) {config.storage.write("historyEventDelay", val)},
    get historyEventDelay () {return config.storage.read("historyEventDelay") !== undefined ? config.storage.read("historyEventDelay") : 1250},
    set annotateScrollbar (val) {config.storage.write("annotateScrollbar", val)},
    get annotateScrollbar () {return config.storage.read("annotateScrollbar") !== undefined ? config.storage.read("annotateScrollbar") : true},
    set autoCloseBrackets (val) {config.storage.write("autoCloseBrackets", val)},
    get autoCloseBrackets () {return config.storage.read("autoCloseBrackets") !== undefined ? config.storage.read("autoCloseBrackets") : false},
    set autoCloseBrackets (val) {config.storage.write("autoCloseBrackets", val)},
    get autoCloseBrackets () {return config.storage.read("autoCloseBrackets") !== undefined ? config.storage.read("autoCloseBrackets") : false},
    set cursorScrollMargin (val) {config.storage.write("cursorScrollMargin", val)},
    get cursorScrollMargin () {return config.storage.read("cursorScrollMargin") !== undefined ? config.storage.read("cursorScrollMargin") : 0},
    set sidebarFontColor (val) {config.storage.write("sidebarFontColor", val)},
    get sidebarFontColor () {return config.storage.read("sidebarFontColor") !== undefined ? config.storage.read("sidebarFontColor") : "#e1e1e1"},
    set maxHighlightLength (val) {config.storage.write("maxHighlightLength", val)},
    get maxHighlightLength () {return config.storage.read("maxHighlightLength") !== undefined ? config.storage.read("maxHighlightLength") : 10000},
    set selectionsMayTouch (val) {config.storage.write("selectionsMayTouch", val)},
    get selectionsMayTouch () {return config.storage.read("selectionsMayTouch") !== undefined ? config.storage.read("selectionsMayTouch") : false},
    set preferredLineLength (val) {config.storage.write("preferredLineLength", val)},
    get preferredLineLength () {return config.storage.read("preferredLineLength") !== undefined ? config.storage.read("preferredLineLength") : 120},
    set pasteLinesPerSelection (val) {config.storage.write("pasteLinesPerSelection", val)},
    get pasteLinesPerSelection () {return config.storage.read("pasteLinesPerSelection") !== undefined ? config.storage.read("pasteLinesPerSelection") : true},
    set softIndentWrappedLines (val) {config.storage.write("softIndentWrappedLines", val)},
    get softIndentWrappedLines () {return config.storage.read("softIndentWrappedLines") !== undefined ? config.storage.read("softIndentWrappedLines") : false},
    set showCursorWhenSelecting (val) {config.storage.write("showCursorWhenSelecting", val)},
    get showCursorWhenSelecting () {return config.storage.read("showCursorWhenSelecting") !== undefined ? config.storage.read("showCursorWhenSelecting") : true},
    set sidebarBackgroundColor (val) {config.storage.write("sidebarBackgroundColor", val)},
    get sidebarBackgroundColor () {return config.storage.read("sidebarBackgroundColor") !== undefined ? config.storage.read("sidebarBackgroundColor") : "#26292f"},
    set resetSelectionOnContextMenu (val) {config.storage.write("resetSelectionOnContextMenu", val)},
    get resetSelectionOnContextMenu () {return config.storage.read("resetSelectionOnContextMenu") !== undefined ? config.storage.read("resetSelectionOnContextMenu") : true},
    set matchHighlighterColor (val) {config.storage.write("matchHighlighterColor", val)},
    get matchHighlighterColor () {return config.storage.read("matchHighlighterColor") !== undefined ? config.storage.read("matchHighlighterColor") : "rgba(31,162,31,0.37)"},
    set matchHighlighterWhenSelected (val) {config.storage.write("matchHighlighterWhenSelected", val)},
    get matchHighlighterWhenSelected () {return config.storage.read("matchHighlighterWhenSelected") !== undefined ? config.storage.read("matchHighlighterWhenSelected") : true},
    set changeAppColorsWhenThemeIsChanged (val) {config.storage.write("changeAppColorsWhenThemeIsChanged", val)},
    get changeAppColorsWhenThemeIsChanged () {return config.storage.read("changeAppColorsWhenThemeIsChanged") !== undefined ? config.storage.read("changeAppColorsWhenThemeIsChanged") : false},
    set hideLeftSidebarWhenEditorIsFocused (val) {config.storage.write("hideLeftSidebarWhenEditorIsFocused", val)},
    get hideLeftSidebarWhenEditorIsFocused () {return config.storage.read("hideLeftSidebarWhenEditorIsFocused") !== undefined ? config.storage.read("hideLeftSidebarWhenEditorIsFocused") : false},
    set hideRightSidebarWhenEditorIsFocused (val) {config.storage.write("hideRightSidebarWhenEditorIsFocused", val)},
    get hideRightSidebarWhenEditorIsFocused () {return config.storage.read("hideRightSidebarWhenEditorIsFocused") !== undefined ? config.storage.read("hideRightSidebarWhenEditorIsFocused") : true}
  }
};
